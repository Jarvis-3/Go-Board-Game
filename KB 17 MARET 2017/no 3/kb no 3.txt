#include <stdio.h>
#include <math.h>
#define EMPTY 0
#define N 9

bool Finish(int kotak[N][N]);
{
    int b, k,angka=0;
    if (!FindEmpty(kotak, b, k))
      { return 1; }
 	else
	{
    	while (angka <= 9)
    	{
        	if (Full(kotak, b, k, angka))
        	{
            	kotak[b][k] = angka;
            	if (Finish(kotak))
               	{ 
					return 1;
				}
            	kotak[b][k] = EMPTY;
        	}
    		angka++;
		}
	}
    return 0;
}
 
bool FindEmpty(int kotak[N][N], int &b, int &k)
{
    for (b = 0; b < N; b++)
	{
        for (k = 0; k < N; k++)
            {
				if (kotak[b][k] == EMPTY)
                 { return 1; }
			}
	}
    return 0;
}
 
bool FullRow(int kotak[N][N], int b, int angka)
{
    for (int k = 0; k < N; k++)
	{
        if (kotak[b][k] == angka)
             { return 1; }
    }
	return 0;
}
 
bool Fullcol(int kotak[N][N], int k, int angka)
{
    for (int b = 0; b < N; b++)
        {
			if (kotak[b][k] == angka)
            { return 1; }
		}    
	return 0;
}

bool FullKotakm(int kotak[N][N], int boxStartb, int boxStartk, int angka)
{
    for (int b = 0; b < 3; b++)
        {
			for (int k = 0; k < 3; k++)
            {
				if (kotak[b+boxStartb][k+boxStartk] == angka)
                 { return 1; }
    		}
		}
			return 0;
}
 
bool Full(int kotak[N][N], int b, int k, int angka)
{
    return ((!FullRow(kotak, b, angka)) && (!Fullcol(kotak, k, angka)) && (!FullKotakm(kotak, b - b%3 , k - k%3, angka)));
}

void print(int kotak[N][N])
{
    for (int b = 0; b < N; b++)
    {
       for (int k = 0; k < N; k++)
             printf(" %d  \n\n", kotak[b][k]);
			 printf("\n");
    }
}
 
int main()
{
    int kotak[N][N] = {{3, 0, 6, 5, 0, 8, 4, 0, 0},{5, 2, 0, 0, 0, 0, 0, 0, 0},
                      {0, 8, 7, 0, 0, 0, 0, 3, 1},{0, 0, 3, 0, 1, 0, 0, 8, 0},
                      {9, 0, 0, 8, 6, 3, 0, 0, 5},{0, 5, 0, 0, 9, 0, 6, 0, 0},
                      {1, 3, 0, 0, 0, 0, 2, 5, 0},{0, 0, 0, 0, 0, 0, 0, 7, 4},{0, 0, 5, 2, 0, 6, 3, 0, 0}};

    if (Finish(kotak) == 1)
    {
		printf("SUDOKU \n\n");
		print(kotak);
	}
    else
	{
         printf("???????");
 	}
    return 0;
}
